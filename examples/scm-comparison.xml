<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xml" href="compare-ml.xsl"?>
<!DOCTYPE comparison SYSTEM "comparison.dtd">
<!--
TODO:

* Add intelligent merging of renamed paths.
* Add IDE integration.
* Add Speed (?)
-->
<comparison>
    <meta>
        <implementations>
            <impl id="cvs">
                <name>CVS</name>
                <url>http://www.cvshome.org/</url>
            </impl>
            <impl id="accurev">
                <name>AccuRev</name>
                <url>http://www.accurev.com/</url>
            </impl>
            <impl id="aegis">
                <name>Aegis</name>
                <url>http://aegis.sourceforge.net/</url>
            </impl>
            <impl id="arch">
                <name>Arch</name>
                <url>http://gnuarch.org/</url>
                <fullname>Arch Revision Control System</fullname>
            </impl>
            <impl id="bazaar">
                <name>Bazaar</name>
                <url>http://bazaar-vcs.org/</url>
            </impl>
            <impl id="bitkeeper">
                <name>BitKeeper</name>
                <url>http://www.bitkeeper.com/</url>
            </impl>
            <impl id="clearcase">
                <name>ClearCase</name>
                <url>http://www-306.ibm.com/software/awdtools/clearcase/</url>
                <fullname>IBM Rational ClearCase</fullname>
            </impl>
            <impl id="cmplus">
                <name>CM+</name>
                <url>http://www.neuma.com/</url>
                <vendor>Neuma</vendor>
            </impl>
            <impl id="cmsynergy">
                <name>CMSynergy</name>
                <url>http://www.telelogic.com/products/synergy/index.cfm</url>
                <vendor>Telelogic</vendor>
            </impl>
            <impl id="co-op">
                <name>Co-Op</name>
                <url>http://www.relisoft.com/co_op/</url>
                <fullname>Code Co-Op</fullname>
            </impl>
            <impl id="darcs">
                <name>Darcs</name>
                <url>http://abridgegame.org/darcs/</url>
            </impl>
            <impl id="ls-sync">
                <name>LibreSource Synchronizer</name>
                <url>http://dev.libresource.org/</url>
            </impl>            
            <impl id="mercurial">
                <name>Mercurial</name>
                <url>http://www.selenic.com/mercurial/</url>
            </impl>
            <impl id="monotone">
                <name>Monotone</name>
                <url>http://www.venge.net/monotone/</url>
            </impl>
            <impl id="opencm">
                <name>OpenCM</name>
                <url>http://www.opencm.org/</url>
            </impl>
            <impl id="perforce">
                <name>Perforce</name>
                <url>http://www.perforce.com/</url>
            </impl>
            <impl id="purecm">
                <name>PureCM</name>
                <url>http://www.purecm.com/</url>
            </impl>
            <impl id="SourceAnywhere">
                <name>SourceAnywhere</name>
                <url>http://www.dynamsoft.com/Products/SAWStandalone_Overview.aspx</url>
                <vendor>DynamSoft</vendor>
            </impl>
            <impl id="subversion">
                <name>Subversion</name>
                <url>http://subversion.tigris.org/</url>
            </impl>
            <impl id="superversion">
                <name>Superversion</name>
                <url>http://www.superversion.org/</url>
            </impl>
            <impl id="svk">
                <name>svk</name>
                <url>http://svk.elixus.org/</url>
            </impl>
            <impl id="vesta">
                <name>Vesta</name>
                <url>http://www.vestasys.org/</url>
            </impl>
            <impl id="vss">
                <name>Visual SourceSafe</name>
                <url>http://msdn.microsoft.com/ssafe/</url>
                <vendor>Microsoft Corp.</vendor>
            </impl>
        </implementations>
        <timestamp>
            $Id: scm-comparison.xml 302 2008-03-07 17:04:18Z shlomif $
        </timestamp>
    </meta>
    <contents>
<section id="main">
    <title>Version Control System Comparison</title>
    <expl>
        This is a comparison of version-control systems. It is split
        into several categories and sub-categories under which the 
        systems are checked.
    </expl>
    <section id="repos_operations">
        <title>Repository Operations</title>
        <section id="atomic_commits">
            <title>Atomic Commits</title>
            <expl>
                Support for atomic commits means that if an
                operation on the repository is interrupted
                in the middle, the repository will not be
                left in an inconsistent state. Are the
                check-in operations atomic, or can
                interrupting an operation leave the
                repository in an intermediate state?
            </expl>
            <compare>
                <s id="cvs">No. CVS commits are not atomic.</s>
                <s id="accurev">Yes. Commits are atomic</s>
                <s id="arch">Yes. Commits are atomic.</s>
                <s id="bazaar">Yes. Commits are atomic.</s>
                <s id="darcs">Yes. Commits are atomic.</s>
                <s id="subversion">Commits are atomic.</s>
                <s id="superversion">Commits are atomic.</s>
                <s id="svk">Commits are atomic.</s>
                <s id="aegis">Commits are atomic.</s>
                <s id="bitkeeper">Yes (but need to verify)</s>
                <s id="mercurial">Yes.</s>
                <s id="monotone">Yes.</s>
                <s id="opencm">Yes. Commits are atomic.</s>
                <s id="perforce">Yes. Commits are atomic.</s>
                <s id="purecm">Yes. Commits are atomic.</s>
                <s id="vesta">Yes. Commits are atomic.</s>
                <s id="co-op">Yes. Commits are atomic.</s>
                <s id="vss">No. VSS commits are not atomic.</s>
                <s id="cmsynergy">Yes. Commits are atomic.</s>
                <s id="cmplus">Yes. Commits are atomic.</s>
                <s id="clearcase">Yes. Commits (checkins) are atomic.</s>
                <s id="ls-sync">Yes. Commits and updates are atomic.</s>
                <s id="SourceAnywhere">Yes. Commits are atomic.</s>
            </compare>
        </section>
        <section id="move">
            <title>Files and Directories Moves or Renames</title>
            <expl>
                Does the system support moving a file or directory to
                a different location while still retaining the history
                of the file?
            </expl>
            <compare>
                <s id="cvs">
                    No. Renames are not supported and a manual one
                    may break history in two.
                </s>
                <s id="accurev">
                    Yes. Renames of both files and directories are supported.
                    Supports controlling of symbolic links as well.
                </s>
                <s id="subversion">Yes. Renames are supported.</s>
                <s id="cmplus">Yes. Both moves and renames are supported, while maintaining history.</s>
                <s id="superversion">No. Renames are not supported.</s>
                <s id="svk">Yes. Renames are supported.</s>
                <s id="arch">Yes. Renames are supported.</s>
                <s id="bazaar">Yes. Renames are supported for files and directories.</s>
                <s id="darcs">Yes. Renames are supported.</s>
                <s id="bitkeeper">Yes. Renames are supported.</s>
                <s id="aegis">Yes. Renames are supported.</s>
                <s id="mercurial">Yes. Renames are supported.</s>
                <s id="monotone">Yes. Renames are supported.</s>
                <s id="opencm">Yes. Renames are supported</s>
                <s id="perforce">
                    Not directly (you copy and then delete but it manages to 
                    keep track of the branch; the item below allows for this 
                    very feature)
                </s>
                <s id="purecm">
                    Yes. File renames are directly supported. File and folder 
                    moves require creating a new one and deleting the old one. 
                    Moved file histories are preserved.
                </s>
                <s id="vesta">
                    Yes.  The unit of checkout/checkin is a directory
                    tree.  Files and directories can be added,
                    deleted, and renamed between versions.
                </s>
                <s id="co-op">Renames of files are supported. 
                    Renaming a directory requires creating a new one, 
                    moving the files and deleting the old one. 
                    Moved file histories are preserved.
                </s>
                <s id="vss">
                    Affects the whole history, it's like renaming a 
                    file in the CVS repository. There is a kludgy workaround 
                    using "share-rename,move,delete" that gets what you 
                    want.
                </s>
                <s id="cmsynergy">Yes. Renames are supported.</s>
                <s id="clearcase">
                  Yes. Directories are first-class controlled entities
                  in Clearcase. Even supports controlling of
                  symbolic/hard links.
                </s>
                <s id="ls-sync">
                    Yes. Renames and move are supported but the working copy
                    needs to be up-to-date before doing a rename/move operation. 
                    This operation will be committed directly.
                </s>
                <s id="SourceAnywhere">Yes. Both moves and renames are supported, while maintaining history.</s>
           </compare>
        </section>
        <section id="copy">
            <title>File and Directories Copies</title>
            <expl>
                Does the version control system support copying
                files or directories to a different location at the
                repository level, while retaining the history?
            </expl>
            <compare>
                <s id="cvs">No. Copies are not supported.</s>
                <s id="accurev">
                    Copying is suppported through symbolic links
                    (but all linked files are treated as the same file 
                    version).  Moves are fully supported with the history
                    retained.
                </s>
                <s id="subversion">Yes. And it's a very cheap operation (O(1)) that 
                    is also utilized for branching
                </s>
                <s id="cmplus">Yes. An inexpensive operation that can be used for
                    sharing files in multiple places.  On deploy, you have the
                    option of deploying only one of the shared files or all of them.
                </s>
                <s id="superversion">No. Copies are not supported.</s>
                <s id="svk">Yes. Same as subversion.</s>
                <s id="arch">No. Copies of files and directory structures are
                    not supported. 
                </s>
                <s id="bazaar">No. Copies are not supported.</s>
                <s id="darcs">No. Copies of files and directory structures are
                    not supported. 
                </s>
                <s id="bitkeeper">
                    Yes. Copies are supported.
                </s>
                <s id="aegis">No. Copies are not supported.</s>
                <s id="mercurial">Yes. Copies are supported</s>
                <s id="monotone">Yes. Copies are supported</s>
                <s id="opencm">No. Copies are not supported.</s>
                <s id="perforce">Copies are supported (though, because
                    of its architecture, I don't know how well)
                </s>
                <s id="purecm">Yes. Copies are supported.</s>
                <s id="vesta">
                    Yes.  A new package/branch can be based on any
                    existing version without affecting the past
                    history.  (This is also an O(1) operation.)
                </s>
                <s id="co-op">Copying doesn't retain history, moving does.</s>
                <s id="vss">Yes. Copies are supported up to a point.</s>
                <s id="cmsynergy">Yes, and it's a very cheap operation (update the target
					directory to include the new file/directory).
				</s>
                <s id="clearcase">
                  Yes, through use of hard links. (But some
                  limitations in Windows environments)
                </s>
                <s id="ls-sync">No, copies will start their own history.</s>
                <s id="SourceAnywhere">Copying doesn't retain history, moving does.</s>
           </compare>
        </section>
    </section>
</section>
    </contents>
</comparison>
